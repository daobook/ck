# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020 Grigori Fursin and the cTuning foundation
# This file is distributed under the same license as the Collective
# Knowledge framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Collective Knowledge framework 2.6.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-21 10:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../src/typical-usage.md:1
msgid "The most common usage"
msgstr ""

#: ../../src/typical-usage.md:3
msgid ""
"Here we describe how to create and share new CK program workflows, "
"software detection plugins, and packages either using new (empty) CK "
"repositories or the existing ones. Portable CK program workflow is the "
"most commonly used CK automation to compile, run, validate, and compare "
"different algorithms and benchmarks across different compilers, "
"libraries, models, datasets, and platforms."
msgstr ""

#: ../../src/typical-usage.md:8
msgid ""
"We strongly suggest you to check the CK introduction and getting started "
"guide first."
msgstr ""

#: ../../src/typical-usage.md:11
msgid ""
"You can also check the following real-world use cases that are based on "
"our portable and customizable CK workflow:"
msgstr ""

#: ../../src/typical-usage.md:13
msgid "MLPerfâ„¢ benchmark automation"
msgstr ""

#: ../../src/typical-usage.md:14
msgid ""
"Reproducible ACM REQUEST tournaments to co-design Pareto-efficient "
"AI/ML/SW/HW stacks"
msgstr ""

#: ../../src/typical-usage.md:15
msgid "Reproducible quantum hackathons"
msgstr ""

#: ../../src/typical-usage.md:16
msgid ""
"Student Cluster Competition automation at SuperComputing: SCC18, general "
"SCC"
msgstr ""

#: ../../src/typical-usage.md:17
msgid "reproducible and interactive paper for ML-based compilers"
msgstr ""

#: ../../src/typical-usage.md:22
msgid ""
"Initialize a new CK repository in the current directory (can be existing "
"Git repo)"
msgstr ""

#: ../../src/typical-usage.md:24
msgid ""
"If you plan to contribute to already existing CK repositories you can "
"skip this subsection. Otherwise, you need to manually create a new CK "
"repository."
msgstr ""

#: ../../src/typical-usage.md:27
msgid ""
"You need to choose some user friendly name such as \"my-new-repo\" and "
"initialize CK repository in your current directory from the command line "
"(Linux, Windows, and MacOS) as follows:"
msgstr ""

#: ../../src/typical-usage.md:35
msgid ""
"If the current directory belongs to a Git repo, CK will automatically "
"detect the URL. Otherwise you need to specify it from CLI too:"
msgstr ""

#: ../../src/typical-usage.md:42
msgid ""
"You can then find where CK created this dummy CK repository using the "
"following command:"
msgstr ""

#: ../../src/typical-usage.md:48
msgid ""
"Note that if you want to share your repository with the community or "
"within workgroups to reuse automations and components, you must create an"
" empty repository at GitHub, GitLab, BitBucket or any other Git-based "
"service. Let's say that you have created my-new-repo at "
"https://github.com/my_name."
msgstr ""

#: ../../src/typical-usage.md:53
msgid "You can then pull this repository using CK as follows:"
msgstr ""

#: ../../src/typical-usage.md:59
msgid ""
"CK will then create my_name_repo repository locally, add default meta "
"information, and will mark it as shared repository (to semi-automatically"
" synchronize content with the associated Git repository):"
msgstr ""

#: ../../src/typical-usage.md:65
msgid ""
"For example, you can later commit and push updates for this repository "
"back to Git as follows:"
msgstr ""

#: ../../src/typical-usage.md:70
msgid ""
"We then suggest you to make the first commit immediately after you pulled"
" your dummy repository from GitHub to push automatically .ckr.json file "
"with some internal meta information and Unique ID back to the GitHub."
msgstr ""

#: ../../src/typical-usage.md:74
msgid ""
"Note that you can also commit and push all updates using Git commands "
"directly from the CK repository directory! Do not forget to commit hidden"
" CK directories *.cm/**!"
msgstr ""

#: ../../src/typical-usage.md:78
msgid ""
"You are now ready to use the newly created repository as a database to "
"add, share, and reuse new components. You can also share this repository "
"with your colleagues or the Artifact Evaluation Committee to test your "
"components and workflows in a unified way:"
msgstr ""

#: ../../src/typical-usage.md:89
msgid ""
"Add dependency on other repositories to reuse automation actions and "
"components"
msgstr ""

#: ../../src/typical-usage.md:91
msgid ""
"When you want to reuse existing CK automation actions and components from"
" other repositories, you need to add a dependency to all these "
"repositories in the .ckr.json file in your root CK repository:"
msgstr ""

#: ../../src/typical-usage.md:115
msgid ""
"Whenever someones pull your repository, CK will automatically pull all "
"other required CK repositories with automation actions!"
msgstr ""

#: ../../src/typical-usage.md:122
msgid "Add a new program workflow"
msgstr ""

#: ../../src/typical-usage.md:124
msgid ""
"You are now ready to add a new CK workflow to compile and run some "
"algorithm or a benchmark in a unified way."
msgstr ""

#: ../../src/typical-usage.md:126
msgid ""
"Since CK concept is about reusing and extending existing components with "
"a common API similar to Wikipedia, we suggest you to look at this index "
"of shared CK programs in case someone have already shared a CK workflows "
"for the same or similar program!"
msgstr ""

#: ../../src/typical-usage.md:130
msgid ""
"If you found a similar program, for example \"image-corner-detection\" "
"you can create a working copy of this program in your new CK repository "
"for further editing as follows:"
msgstr ""

#: ../../src/typical-usage.md:139
msgid ""
"You now have a working copy of the CK \"image-corner-detection\" program "
"entry in your new repository that contains sources and the CK meta "
"information about how to compile and run this program:"
msgstr ""

#: ../../src/typical-usage.md:147
msgid "You can find and explore the new CK entry from command line as follows:"
msgstr ""

#: ../../src/typical-usage.md:152
msgid "You will see the following files in this directory:"
msgstr ""

#: ../../src/typical-usage.md:154
msgid ""
".cm/desc.json - description of all I/O types in all automation actions "
"(empty by default - we can skip it for now)"
msgstr ""

#: ../../src/typical-usage.md:155
msgid ""
".cm/info.json - the provenance for this entry (creation date, author, "
"license, etc)"
msgstr ""

#: ../../src/typical-usage.md:156
msgid ""
".cm/meta.json - main CK meta information about how to compile, run, and "
"validate this program"
msgstr ""

#: ../../src/typical-usage.md:157
msgid "*susan.c'' - source code of this program"
msgstr ""

#: ../../src/typical-usage.md:159
msgid ""
"Once again, do not forget to add .cm directories when committing to Git "
"since .cm files are usually not visible from bash in Linux!"
msgstr ""

#: ../../src/typical-usage.md:161
msgid ""
"If you did not find a similar program, you can then create a new program "
"using shared program templates as follows:"
msgstr ""

#: ../../src/typical-usage.md:167
msgid "CK will then ask you to select the most close template:"
msgstr ""

#: ../../src/typical-usage.md:186
msgid ""
"If you select \"Python TensorFlow classification example\", CK will "
"create a working image classification program in your new repository with"
" software dependencies on TensorFlow AI framework and compatible models."
msgstr ""

#: ../../src/typical-usage.md:191
msgid "Since it's a Python program, you do not need to compile it:"
msgstr ""

#: ../../src/typical-usage.md:197
msgid ""
"Note that you can later make your own program a template by adding the "
"following key to the meta.json file:"
msgstr ""

#: ../../src/typical-usage.md:204
msgid "Update program sources"
msgstr ""

#: ../../src/typical-usage.md:206
msgid ""
"If you found a similar program with all the necessary software "
"dependencies, you can now update or change its sources for your own "
"program."
msgstr ""

#: ../../src/typical-usage.md:209
msgid ""
"In such case, you must update the following keys in the meta.json of this"
" program entry:"
msgstr ""

#: ../../src/typical-usage.md:211
msgid "add your source files:"
msgstr ""

#: ../../src/typical-usage.md:218
msgid "specify a command line to run your program (see run_cmd_main):"
msgstr ""

#: ../../src/typical-usage.md:247
msgid ""
"Note that you can have more than one possible command line to run this "
"program. In such case, CK will ask you which one to use when you run this"
" program. For example, this can be useful to perform ML model training "
"(\"train\"), validation (\"test\"), and classification (\"classify\")."
msgstr ""

#: ../../src/typical-usage.md:252
msgid ""
"You can also update meta.json keys to customize program compilation and "
"execution:"
msgstr ""

#: ../../src/typical-usage.md:268
msgid ""
"Note that you can update environment variables when running a given "
"program in a unified way from the command line as follows:"
msgstr ""

#: ../../src/typical-usage.md:274
msgid ""
"You can also expose different algorithm parameters and optimizations via "
"environment to apply customizable CK autotuner as used in this CK ReQuEST"
" workflow to automatically explore (co-design) different MobileNets "
"configurations in terms of speed, accuracy, and costs."
msgstr ""

#: ../../src/typical-usage.md:279
msgid ""
"Here is the brief description of other important keys in CK program "
"meta.json:"
msgstr ""

#: ../../src/typical-usage.md:351
msgid ""
"You can also check how to use pre and post-processing scripts before and "
"after running your program in this example from the Student Cluster "
"Competition'18."
msgstr ""

#: ../../src/typical-usage.md:359
msgid "Update software dependencies"
msgstr ""

#: ../../src/typical-usage.md:361
msgid ""
"If you new program rely on extra software dependencies (compilers, "
"libraries, models, datasets) you must first find the ones you need in "
"this online index of software detection plugins. You can then specify the"
" tags and versions either using compile_deps or run_deps keys in the "
"meta.json of your new program as follows:"
msgstr ""

#: ../../src/typical-usage.md:401
msgid ""
"As a minimum, you just need to add a new sub-key such as \"lib-"
"tensorflow\", a user-friendly name such as \"TensorFlow library\", one or"
" more tags to specify your software detection plugin from above index (CK"
" will use these tags to find related CK components), and an order in "
"which dependencies will be resolved using the sort key."
msgstr ""

#: ../../src/typical-usage.md:407
msgid "You can also select version ranges with the following keys:"
msgstr ""

#: ../../src/typical-usage.md:413
msgid "Have a look at a more complex meta.json of the Caffe CUDA package."
msgstr ""

#: ../../src/typical-usage.md:416
msgid ""
"Whenever CK compiles or runs programs, it first automatically resolves "
"all software dependencies. CK also registers all detected software or "
"installed packages in the CK virtual environment (see the getting started"
" guide) with automatically generated env.sh or env.bat batch scripts. "
"These scripts are then loaded one after another based on the above sort  "
"key to aggregate all required environment variables and pass them either "
"to the compilation or execution scripts. Your scripts and algorithms can "
"then use all these environment variables to customize compilation and "
"execution without any need to change paths manually, i.e. we enable "
"portable workflows that can automatically adapt to a user environment."
msgstr ""

#: ../../src/typical-usage.md:430
msgid "Reuse or add basic datasets"
msgstr ""

#: ../../src/typical-usage.md:432
msgid ""
"We have developed a simple mechanism in the CK workflow to reuse basic "
"(small) datasets such a individual images."
msgstr ""

#: ../../src/typical-usage.md:434
msgid "You can find already shared datasets using this online index."
msgstr ""

#: ../../src/typical-usage.md:436
msgid ""
"If you want to reuse them in your program workflow, you can find the "
"related one, check its tags (see the meta.json of the image-jpeg-0001 "
"dataset), and add them to your program meta as follows:"
msgstr ""

#: ../../src/typical-usage.md:455
msgid ""
"CK then search for all dataset entries in all pulled CK repositories "
"using these flags, and will ask a user which one to use when multiple "
"entries are found. CK will then substitute "
"$#dataset_path#$$#dataset_filename#$ with the full path and a file of the"
" dataset from the selected entry."
msgstr ""

#: ../../src/typical-usage.md:460
msgid ""
"Such approach allows to get rid of hardwired paths in ad-hoc scripts "
"while easily sharing and reusing related datasets. Whenever you pull a "
"new repository with CK datasets, they can be automatically picked up by a"
" given program workflow!"
msgstr ""

#: ../../src/typical-usage.md:465
msgid ""
"For example you can see all pgm images available in your CK repositories "
"as follows:"
msgstr ""

#: ../../src/typical-usage.md:471
msgid "You can add a new dataset in your new repository as follows:"
msgstr ""

#: ../../src/typical-usage.md:476
msgid ""
"You will be asked to enter some tags and to select a file that will be "
"copied into your new CK entry."
msgstr ""

#: ../../src/typical-usage.md:478
msgid ""
"Note that for large and complex datasets such as ImageNet, we use CK "
"packages that can download a given dataset and even process it depending "
"on other software dependencies. For example one may need a different "
"procedure when using TensorFlow or PyTorch or MXNet."
msgstr ""

#: ../../src/typical-usage.md:485
msgid "Add new CK software detection plugins"
msgstr ""

#: ../../src/typical-usage.md:487
msgid ""
"If CK software plugin doesn't exist for a given code, data, or models, "
"you can add a new one either in your own repository or in already "
"existing ones."
msgstr ""

#: ../../src/typical-usage.md:490
msgid ""
"We suggest you to find the most close software detection plugin using "
"this online index, pull this repository, and make a copy in your "
"repository as follows:"
msgstr ""

#: ../../src/typical-usage.md:497
msgid "or"
msgstr ""

#: ../../src/typical-usage.md:502
msgid ""
"Alternatively, you can add a new soft entry and select the most relevant "
"template:"
msgstr ""

#: ../../src/typical-usage.md:507
msgid ""
"You must then update related keys in the .cm/meta.json file of the new CK"
" entry. You can find it as follows:"
msgstr ""

#: ../../src/typical-usage.md:514
msgid "Typical software meta description:"
msgstr ""

#: ../../src/typical-usage.md:543
msgid ""
"First, you must update tags keys for your new software, soft_name to "
"provide a user-friendly name for your software, env_prefix to expose "
"different environment variables for the detected software in the "
"automatically generated virtual environment script (env.sh or env.bat), "
"and soft_file keys to tell CK which unique filename inside this soft to "
"search for when detecting this software automatically on your system."
msgstr ""

#: ../../src/typical-usage.md:550
msgid ""
"If the soft_file is the same across all platforms (Linux, Windows, MacOS,"
" etc), you can use the following universal key:"
msgstr ""

#: ../../src/typical-usage.md:556
msgid ""
"CK will then substitute file_ext_dll with dll key from the "
"file_extensions dictionary in the target OS (see example for the 64-bit "
"Linux and 64-bit Windows)."
msgstr ""

#: ../../src/typical-usage.md:560
msgid ""
"You can also tell CK to detect a given soft for a different target such "
"as Android as follows:"
msgstr ""

#: ../../src/typical-usage.md:566
msgid ""
"Next, you may want to update the customize.py file in the new entry. This"
" Python script can have multiple functions to customize the detection of "
"a given software and update different environment variables in the "
"automatically generated \"env.sh\" or \"env.bat\" for the virtual CK "
"environment."
msgstr ""

#: ../../src/typical-usage.md:571
msgid ""
"For example, setup function receives a full path to a found software file"
" specified using the above soft_name keys:"
msgstr ""

#: ../../src/typical-usage.md:578
msgid ""
"It is then used to prepare different environment variables with different"
" paths (see env dictionary) as well as embedding commands directly to "
"\"env.sh\" or \"env.bat\" using \"s\" string in the returned dictionary:"
msgstr ""

#: ../../src/typical-usage.md:585
msgid ""
"Here is an example of the automatically generated \"env.sh\" on a user "
"machine:"
msgstr ""

#: ../../src/typical-usage.md:628
msgid ""
"All these environment variables will be exposed to the CK program "
"compilation and execution workflow if this software dependency is seleted"
" in a program meta description."
msgstr ""

#: ../../src/typical-usage.md:631
msgid ""
"You can also look at how this functionality is implemented in the CK soft"
" module."
msgstr ""

#: ../../src/typical-usage.md:633
msgid ""
"There are many options and nuances so we suggest you to have a look at "
"existing examples or contact the CK community for further details. We "
"regularly explain users how to add new software detection plugins and "
"packages."
msgstr ""

#: ../../src/typical-usage.md:640
msgid "Add new CK packages"
msgstr ""

#: ../../src/typical-usage.md:642
msgid ""
"Whenever a required software is not found, CK will automatically search "
"for existing packages with the same tags for a given target in all "
"installed CK repositories."
msgstr ""

#: ../../src/typical-usage.md:646
msgid ""
"CK package module provides a unified JSON API to automatically download, "
"install, and potentially rebuild a given package (software, datasets, "
"models, etc) in a portable way across Linux, Windows, MacOS, Android, and"
" other supported platforms. It is also a unified front-end for other "
"package managers and build tools including make, cmake, scons, Spack, "
"EasyBuild, etc."
msgstr ""

#: ../../src/typical-usage.md:652
msgid ""
"If CK packages are not found, CK will print notes from the install.txt "
"file from a related software detection plugin about how to download and "
"install such package manually as shown in this example for CUDA."
msgstr ""

#: ../../src/typical-usage.md:657
msgid ""
"In such case, you may be interested to provide a new CK package to be "
"reused either in your workgroup or by the broad community to automate the"
" installation."
msgstr ""

#: ../../src/typical-usage.md:660
msgid ""
"Similar to adding CK software detection plugins, you must first find the "
"most close package from this online index, download it, and make a new "
"copy in your repository unless you want to share it immediately with the "
"community in already existing CK repositories."
msgstr ""

#: ../../src/typical-usage.md:665
msgid ""
"For example, let's copy a CK protobuf package that downloads a given "
"protobuf version in a tgz archive and uses cmake to build it:"
msgstr ""

#: ../../src/typical-usage.md:672
msgid ""
"Note, that all CK packages must be always connected with some software "
"detection plugins such as \"soft:lib.my-new-lib\" created in the previous"
" section. You just need to find its Unique ID as follows:"
msgstr ""

#: ../../src/typical-usage.md:678
msgid "and add it to the soft_uoa key in the package meta.json."
msgstr ""

#: ../../src/typical-usage.md:680
msgid ""
"Next, copy/paste the same tags from the meta.json of the soft plugin to "
"the meta.json of the package and add extra tags specifying a version. See"
" examples of such tags in existing packages such as lib-armcl-"
"opencl-18.05 and compiler-llvm-10.0.0-universal."
msgstr ""

#: ../../src/typical-usage.md:686
msgid ""
"Alternatively, you can add a new CK package using existing templates "
"while specifying a related software plugin in the command line as "
"follows:"
msgstr ""

#: ../../src/typical-usage.md:693
msgid ""
"In such case, CK will automatically substitute correct values for "
"soft_uoa and tags keys!"
msgstr ""

#: ../../src/typical-usage.md:695
msgid ""
"Next, you need to update the .cm/meta.json file in the new CK package "
"entry:"
msgstr ""

#: ../../src/typical-usage.md:700
msgid ""
"For example, you need to update other keys in the package meta.json to "
"customize downloading and potentially building (building is not strictly "
"required when you download datasets, models, and other binary packages):"
msgstr ""

#: ../../src/typical-usage.md:728
msgid ""
"You can specify extra software dependencies using deps dictionary if "
"needed."
msgstr ""

#: ../../src/typical-usage.md:730
msgid ""
"You must also describe the file which will be downloaded or created at "
"the end of the package installation process using end_full_path key to "
"let CK validate that the process was successful:"
msgstr ""

#: ../../src/typical-usage.md:740
msgid ""
"You can add or update a script to download and build a given package. See"
" examples of such scripts in CK package imagenet-2012-aux: install.sh and"
" install.bat to download ImageNet 2012 auxiliary dataset used in the ACM "
"ReQuEST-ASPLOS tournament and MLPerfâ„¢ submissions."
msgstr ""

#: ../../src/typical-usage.md:746
msgid "Note that CK will pass at least 2 environment variables to this script:"
msgstr ""

#: ../../src/typical-usage.md:747
msgid ""
"PACKAGE_DIR - the path to the CK package entry. This is useful if your "
"script need additional files or subscripts from the CK package entry."
msgstr ""

#: ../../src/typical-usage.md:748
msgid ""
"INSTALL_DIR - the path where this package will be installed. Note that "
"end_full_path key will be appended to this path."
msgstr ""

#: ../../src/typical-usage.md:750
msgid ""
"If you need to know extra CK variables passed to this script, you can "
"just export all environment variable to some file and check the ones "
"starting from CK_."
msgstr ""

#: ../../src/typical-usage.md:754
msgid ""
"For example, if your package has software dependencies on a specific "
"Python version, all environment variables from the resolved software "
"dependencies will be available in your installation script. This allows "
"you to use the ${CK_ENV_COMPILER_PYTHON_FILE} environment variable "
"instead of calling python directly to be able to automatically adapt to "
"different python versions on your machine."
msgstr ""

#: ../../src/typical-usage.md:760
msgid ""
"At the end of the package installation, CK will check if this file was "
"created, and will pass it to the related software detection plugin to "
"register the CK virtual environment, thus fully automating the process of"
" rebuilding the required environment for a given workflow!"
msgstr ""

#: ../../src/typical-usage.md:765
msgid ""
"If you need to create a simple package that downloads an archive, uses "
"configure to configure it, and builds it using make, use this lib-"
"openmpi-1.10.3-universal CK package as example:"
msgstr ""

#: ../../src/typical-usage.md:779
msgid ""
"Note that we described only a small part of all available functions of "
"the CK package manager that we have developed in collaboration with our "
"[http://cKnowledge.org/partners.html partners and users]. We continue "
"documenting them and started working on a user-friendly GUI to add new "
"software and packages via web. You can try it here."
msgstr ""

#: ../../src/typical-usage.md:787
msgid "Pack CK repository"
msgstr ""

#: ../../src/typical-usage.md:789
msgid "You can pack a given repository as follows:"
msgstr ""

#: ../../src/typical-usage.md:794
msgid ""
"This command will create a ckr-my-new-repo.zip file that you can archive "
"or send to your colleagues and artifact evaluators."
msgstr ""

#: ../../src/typical-usage.md:796
msgid ""
"Other colleagues can then download it and install it on their system as "
"follows:"
msgstr ""

#: ../../src/typical-usage.md:802
msgid ""
"They can also unzip entries to an existing repository (local by default) "
"as follows:"
msgstr ""

#: ../../src/typical-usage.md:807
msgid ""
"This enables a simple mechanism to share repositories, automation "
"actions, and components including experimental results and reproducible "
"papers with the community. We also hope it will help to automate the "
"tedious Artifact Evaluation process."
msgstr ""

#: ../../src/typical-usage.md:814
msgid "Prepare CK repository for Digital Libraries"
msgstr ""

#: ../../src/typical-usage.md:816
msgid ""
"During the ACM ReQuEST-ASPLOS'18 tournament the authors needed to share "
"the snapshots of their implementations of efficient deep learning "
"algorithms for the ACM Digital Library."
msgstr ""

#: ../../src/typical-usage.md:820
msgid ""
"We have added a new automation to the CK to prepare such snapshots of a "
"given repository with all dependencies and the latest CK framework in one"
" zip file:"
msgstr ""

#: ../../src/typical-usage.md:827
msgid ""
"It will create a ck-artifacts-{date}.zip archive with all related CK "
"repositories, the CK framework, and two scripts:"
msgstr ""

#: ../../src/typical-usage.md:829
msgid "prepare_virtual_ck.bat"
msgstr ""

#: ../../src/typical-usage.md:830
msgid "run_virtual_ck.bat"
msgstr ""

#: ../../src/typical-usage.md:832
msgid ""
"The first script will unzip all CK repositories and the CK framework "
"inside your current directory."
msgstr ""

#: ../../src/typical-usage.md:834
msgid ""
"The second script will set environment variables to point to above CK "
"repositories in such a way that it will not influence you existing CK "
"installation! Basically it creates a virtual CK environment for a given "
"CK snapshot. At the end, this script will run bash on Linux/MacOS or cmd "
"on Windows allowing you to run CK commands to prepare, run, and validate "
"a given CK workflow while adapting to your platform and environment!"
msgstr ""

#: ../../src/typical-usage.md:845
msgid "Prepare a Docker container with CK workflows"
msgstr ""

#: ../../src/typical-usage.md:847
msgid ""
"One of the CK goals is to be a plug&play connector between non-portable "
"workflows and containers."
msgstr ""

#: ../../src/typical-usage.md:849
msgid ""
"CK can work both in native environments and containers. While portable CK"
" workflows can fail in the latest environment, they will work fine inside"
" a container with a stable environment."
msgstr ""

#: ../../src/typical-usage.md:852
msgid ""
"We have added the CK module docker to make it easier to build, share, and"
" run Docker descriptions. Please follow the Readme in the ck-docker for "
"more details."
msgstr ""

#: ../../src/typical-usage.md:856
msgid ""
"Please check examples of the CK Docker entries with CK workflows and "
"components in the following projects:"
msgstr ""

#: ../../src/typical-usage.md:858
msgid "https://github.com/ctuning/ck-mlperf/tree/master/docker"
msgstr ""

#: ../../src/typical-usage.md:859
msgid ""
"https://github.com/ctuning/ck-request-asplos18-caffe-"
"intel/tree/master/docker"
msgstr ""

#: ../../src/typical-usage.md:860
msgid "https://github.com/ctuning/ck-docker/tree/master/docker"
msgstr ""

#: ../../src/typical-usage.md:862
msgid ""
"You can find many of these containers ready for deployment, usage, and "
"further customization at the cTuning Docker hub."
msgstr ""

#: ../../src/typical-usage.md:871
msgid "Create more complex workflows"
msgstr ""

#: ../../src/typical-usage.md:873
msgid ""
"Users can create even more complex CK workflows that will automatically "
"compile, run, and validate multiple applications with different "
"compilers, datasets, and models across different platforms while sharing,"
" visualizing, and comparing experimental results via live scoreboards."
msgstr ""

#: ../../src/typical-usage.md:877
msgid "See the following examples:"
msgstr ""

#: ../../src/typical-usage.md:878
msgid "https://cKnowledge.org/rpi-crowd-tuning"
msgstr ""

#: ../../src/typical-usage.md:879
msgid ""
"https://github.com/SamAinsworth/reproduce-cgo2017-paper (see CK workflow "
"module)"
msgstr ""

#: ../../src/typical-usage.md:880
msgid "https://github.com/ctuning/ck-scc18/wiki"
msgstr ""

#: ../../src/typical-usage.md:881
msgid "https://github.com/ctuning/ck-scc"
msgstr ""

#: ../../src/typical-usage.md:882
msgid "https://github.com/ctuning/ck-request-asplos18-results"
msgstr ""

#: ../../src/typical-usage.md:885
msgid "Users can create such workflows using two methods:"
msgstr ""

#: ../../src/typical-usage.md:887
msgid "Using shell scripts"
msgstr ""

#: ../../src/typical-usage.md:889
msgid ""
"We have added CK module script that allows you to add a CK entry where "
"you can store different system scripts. Such scripts can call different "
"CK modules to install packages, build and run programs, prepare "
"interactive graphs, generate papers, etc."
msgstr ""

#: ../../src/typical-usage.md:894
msgid ""
"You can see examples of such scripts from the reproducible CGO'17 paper. "
"You can also check this unified Artifact Appendix and reproducibility "
"checklist at the end of this article describing how to run those scripts."
msgstr ""

#: ../../src/typical-usage.md:898
msgid "You can add your own CK script entry as follows:"
msgstr ""

#: ../../src/typical-usage.md:904
msgid ""
"You can also write Python scripts calling CK APIs directly. For example, "
"check this ReQuEST-ASPLOS'18 benchmark script to prepare, run, and "
"customize ACM REQUEST experiments:"
msgstr ""

#: ../../src/typical-usage.md:942
msgid "Using CK modules"
msgstr ""

#: ../../src/typical-usage.md:944
msgid ""
"You can also add and use any new module \"workflow.my-new-experiments\" "
"as a workflow with different functions to prepare, run, and validate "
"experiments. This is the preferred method that allows you to use unified "
"CK APIs and reuse this module in other projects:"
msgstr ""

#: ../../src/typical-usage.md:953
msgid ""
"Note, that CK module and entry names are global in the CK. Therefore, we "
"suggest you to find a unique name."
msgstr ""

#: ../../src/typical-usage.md:955
msgid ""
"You can then add any function to this workflow. For example, let's add a "
"function \"run\" to run your workflow:"
msgstr ""

#: ../../src/typical-usage.md:960
msgid ""
"CK will create a working dummy function in the python code of this CK "
"module that you can test immediately:"
msgstr ""

#: ../../src/typical-usage.md:965
msgid ""
"You can then find the module.py from this CK module and update run "
"function to implement your workflow:"
msgstr ""

#: ../../src/typical-usage.md:972
msgid ""
"Don't hesitate to get in touch with the [[Contacts|CK community]] if you "
"have questions or comments."
msgstr ""

#: ../../src/typical-usage.md:978
msgid "Generate reproducible and interactive articles"
msgstr ""

#: ../../src/typical-usage.md:982
msgid ""
"Unified CK APIs and portable CK workflows can help to automate all "
"experiments as well as the generation of papers with all tables and "
"graphs."
msgstr ""

#: ../../src/typical-usage.md:985
msgid ""
"As a proof-of-concept, we collaborated with the Raspberry Pi foundation "
"to reproduce results from the MILEPOST project and develop a Collective "
"Knowledge workflow for collaborative research into multi-objective "
"autotuning and machine learning techniques."
msgstr ""

#: ../../src/typical-usage.md:990
msgid ""
"We have developed a MILEPOST GCC workflow, shared results in the CK "
"repository, created live CK dashboards to crowdsource autotuning, and "
"automatically generated a live and interactive article where results can "
"be automatically updated by the community. The stable snapshot of such "
"article can still be published as a traditional PDF paper."
msgstr ""

#: ../../src/typical-usage.md:997
msgid ""
"However, it is still a complex process. We have started documenting this "
"functionality here and plan to gradually improve it. When we have more "
"resources, we plan to add a web-based GUI to the cKnowledge.io platform "
"to make it easier to create such live, reproducible, and interactive "
"articles."
msgstr ""

#: ../../src/typical-usage.md:1007
msgid "Publish CK repositories, workflows, and components"
msgstr ""

#: ../../src/typical-usage.md:1009
msgid ""
"We are developing an open cKnowledge.io platform to let users share and "
"reuse CK repositories, workflows, and components similar to PyPI. Please "
"follow this guide to know more."
msgstr ""

#: ../../src/typical-usage.md:1016
msgid "Contact the CK community"
msgstr ""

#: ../../src/typical-usage.md:1018
msgid ""
"We continue improving the CK technology, components, automation actions, "
"workflows, and this documentation! If you have questions, encounter "
"problems or have some feedback, do not hesitate to contact us!"
msgstr ""

