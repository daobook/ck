# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020 Grigori Fursin and the cTuning foundation
# This file is distributed under the same license as the Collective
# Knowledge framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Collective Knowledge framework 2.6.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-21 10:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../src/introduction.md:1
msgid "CK basics"
msgstr "CK 基础"

#: ../../src/introduction.md:3
msgid "Project overview"
msgstr "项目概述"

#: ../../src/introduction.md:5
msgid "Philosophical Transactions of the Royal Society: paper, shorter pre-print"
msgstr ""

#: ../../src/introduction.md:7
msgid "<img src=\"https://img.youtube.com/vi/7zpeIVwICa4/0.jpg\" width=\"320\">"
msgstr ""

#: ../../src/introduction.md:10
msgid "Why CK?"
msgstr "为什么是 CK？"

#: ../../src/introduction.md:12
msgid ""
"While working in large R&D projects with multiple partners to design "
"efficient machine learning systems, we face the same problems over and "
"over again:"
msgstr ""
"在与多个合作伙伴开展大型研发项目以设计高效的机器学习系统时，我们反复面临同样的问题："

#: ../../src/introduction.md:15
msgid ""
"When we find an interesting GitHub project, a Jupyter/Colab notebook, or "
"a Docker file from a research paper, we want to test it with different "
"data, models, libraries, and AI frameworks. We may also want to compare "
"it with another project or integrate it with some continuous integration "
"service, or even rebuild it with a different compiler to run on a "
"different hardware. However, we quickly get lost in the structure of the "
"project, scripts, and APIs, and spend too much time trying to figure out "
"how to make it compatible with different software and hardware, and how "
"to plug in different datasets and models while correctly setting up "
"numerous paths and variables. Eventually, we either give up or we manage "
"to customize and run it but then we often struggle to reproduce and "
"compare results (speed, throughput, accuracy, energy, costs). By that "
"time, we most likely have to look at another project while facing the "
"same problems again."
msgstr ""
"当发现一个有趣的 GitHub 项目、Jupyter/Colab 笔记本或研究论文中的 Docker 文件时，"
"想用不同的数据、模型、库和 AI 框架来测试它。"
"可能还想把它与另一个项目进行比较，或与一些持续集成服务进行整合，甚至用不同的编译器重建它，以便在不同的硬件上运行。"
"然而，很快就会迷失在项目、脚本和 API 的结构中，花太多的时间去弄清楚如何让它与不同的软件和硬件兼容，"
"以及如何在正确设置众多路径和变量的同时插入不同的数据集和模型。"
"最终，要么放弃，要么设法定制并运行它，但随后我们往往难以再现和比较结果（速度、吞吐量、准确性、能源、成本）。"
"到那个时候，我们很可能不得不关注另一个项目，同时再次面临同样的问题。"

#: ../../src/introduction.md:27
msgid ""
"We want to reuse some data, code, and models from our own project or from"
" the project we participated in a few years ago, but we already forgot "
"the details and scripts while the readme files and comments are too "
"vague, our colleagues or students have left the project, and we either "
"give up or start reimplementing everything from scratch."
msgstr ""
"想重用自己的项目或几年前参与的项目中的一些数据、代码和模型，但我们已经忘记了细节和脚本，"
"而 readme 文件和注释又太模糊，我们的同事或学生已经离开了这个项目，我们要么放弃，要么开始从头开始重新实现一切。"

#: ../../src/introduction.md:32
msgid ""
"Eventually, we realized that a possible solution is to organize software "
"projects and folders as a database of components (algorithms, datasets, "
"models, frameworks, scripts, results from experiments, papers, etc) with "
"extensible JSON meta descriptions. In such case we can have a simple tool"
" to automatically find all related components from all projects. We can "
"also implement common automation actions for related components that can "
"be reused across different projects due to a unified API and CLI. We can "
"even implement workflows from these actions that can automatically find "
"and plug in all related components from all compatible projects thus "
"minimizing manual interventions and providing a common interface for all "
"shared projects and components."
msgstr ""
"最终，意识到可能的解决方案是将软件项目和文件夹组织成一个具有可扩展的 JSON 元描述的组件"
"（算法、数据集、模型、框架、脚本、实验结果、论文等）数据库。"
"在这种情况下，可以有一个简单的工具来自动查找所有项目中的相关组件。"
"还可以为相关的组件实现通用的自动化操作，由于有了统一的 API 和 CLI，可以在不同的项目中重复使用。"
"甚至可以从这些行为中实现工作流，可以自动找到并插入所有兼容项目中的所有相关组件，"
"从而最大限度地减少人工干预，并为所有共享项目和组件提供一个共同的界面。"

#: ../../src/introduction.md:42
msgid ""
"We called this project Collective Knowledge (CK) because it helps users "
"share their knowledge, experience, and best practices as reusable "
"automation actions and components with a common API and meta description."
" Interestingly, the CK concept enables FAIR principles (findability, "
"accessibility, interoperability, and reusability) published in this "
"Nature article."
msgstr ""
"项目称为集体知识（CK），因为它可以帮助用户分享他们的知识、经验和最佳实践，作为可重复使用的自动化行为和组件，有一个共同的 API 和元描述。"
"有趣的是，CK 概念实现了 Nature article 杂志这篇文章中发表的 FAIR 原则（可查找性、可访问性、互操作性和可重用性）。"

#: ../../src/introduction.md:50
msgid "What is CK?"
msgstr "CK 是什么？"

#: ../../src/introduction.md:52
msgid ""
"We have developed the Collective Knowledge framework (CK) as a small "
"Python library with minimal dependencies to be very portable and have the"
" possibility to be implemented in other languages such as C, C++, Java, "
"and Go. The CK framework has a unified command line interface (CLI), a "
"Python API, and a JSON-based web service to manage CK repositories and "
"add, find, update, delete, rename, and move CK components (sometimes "
"called CK entries or CK data)."
msgstr ""
"已经开发了集体知识框架（CK），作为一个小型的 Python 库，具有最小的依赖性，可以很好地移植，"
"并且有可能用其他语言实现，如 C、C++、Java 和 Go。"
"CK 框架有统一的命令行界面（CLI）、Python API 和基于 JSON 的网络服务来管理 CK 资源库和"
"添加、查找、更新、删除、重命名和移动 CK 组件（有时称为 CK 条目或 CK 数据）。"

#: ../../src/introduction.md:60
msgid ""
"CK repositories are human-readable databases of reusable CK components "
"that can be created in any local directory and inside containers, pulled "
"from GitHub and similar services, and shared as standard archive files. "
"CK components simply wrap user artifacts and provide an extensible JSON "
"meta description with common automation actions for related artifacts."
msgstr ""
"CK 资源库是可重复使用的 CK 组件的人类可读数据库，可以在任何本地目录和容器内创建，从 GitHub 和类似服务中提取，并作为标准存档文件共享。"
"CK 组件简单地包裹了用户工件，并提供了一个可扩展的 JSON 元描述，其中有相关工件的常见自动化操作。"

#: ../../src/introduction.md:66
msgid ""
"Automation actions are implemented using CK modules - Python modules with"
" functions exposed in a unified way via CK API and CLI and using "
"extensible dictionaries for input/output (I/O). The use of dictionaries "
"makes it easier to support continuous integration tools and web services "
"and extend the functionality while keeping backward compatibility. The "
"unified I/O also makes it possible to reuse such actions across projects "
"and chain them together into unified pipelines and workflows."
msgstr ""
"自动化 action 是使用 CK 模块实现的 -- Python 模块的功能通过 CK API 和 CLI 以统一的方式暴露出来，"
"并使用可扩展的字典进行输入/输出（I/O）。字典的使用使其更容易支持持续集成工具和网络服务，并在保持向后兼容的同时扩展功能。"
"统一的 I/O 也使得跨项目重复使用这些 action 成为可能，并将它们串联成统一的管道和工作流程。"

#: ../../src/introduction.md:74
msgid ""
"Since we wanted CK to be non-intrusive and technology neutral, we decided"
" to use a simple 2-level directory structure to wrap user artifacts into "
"CK components:"
msgstr ""
"由于希望 CK 是非侵入性和技术中立的，我们决定使用一个简单的 2 级目录结构，将用户的工件包装成 CK 组件："

#: ../../src/introduction.md ../../src/introduction.md:77
msgid "wrappers"
msgstr ""

#: ../../src/introduction.md:79
msgid ""
"The root directory of the CK repository contains the .ckr.json file to "
"describe this repository and specify dependencies on other CK "
"repositories to explicitly reuse their components and automation actions."
msgstr ""
"CK 资源库的根目录包含 .ckr.json 文件，用来描述这个资源库，并指定对其他 CK 资源库的依赖关系，以明确地重复使用它们的组件和自动化操作。"

#: ../../src/introduction.md:82
msgid ""
"CK uses .cm directories similar to .git to store meta information of all "
"components as well as Unique IDs of all components to be able to find "
"them even if their user-friendly names have changed over time (CK alias)."
msgstr ""
"CK 使用类似于 .git 的 .cm 目录来存储所有组件的元信息，以及所有组件的唯一 ID，以便能够找到它们，"
"即使它们的用户友好名称随着时间的推移而改变（CK 别名）。"

#: ../../src/introduction.md:86
msgid ""
"CK modules are always stored in module / < CK module name > directories "
"in the CK repository. For example, module/dataset or module/program. They"
" have a module.py with associated automation actions (for example, "
"module/dataset/module.py or module/program/module.py). Such approach "
"allows multiple users to add, improve, and reuse common automation action"
" for related components rather than reimplementing them from scratch for "
"each new project."
msgstr ""
"CK 模块总是存储在 CK 资源库的 module / < CK module name > 目录下。"
"例如，module/dataset 或 module/program。"
"它们有一个带有相关自动化 action 的 module.py（例如，module/dataset/module.py 或 module/program/module.py）。"
"这种方法允许多个用户为相关的组件添加、改进和重用共同的自动化 action，而不是为每个新项目从头开始重新实现。"

#: ../../src/introduction.md:95
msgid ""
"CK components are stored in < CK module name > / < CK data name > "
"directories. For example, dataset/text1234-for-nlp or dataset/some-"
"images-from-imagenet."
msgstr ""
"CK 组件存储在 < CK module name > / < CK data name > 目录下。"
"例如，dataset/text1234-for-nlp 或 dataset/some-images-from-imagenet。"

#: ../../src/introduction.md:98
msgid ""
"Each CK component has a .cm directory with the meta.json file describing "
"a given artifact and info.json file to keep the provenance of a given "
"artifact including copyrights, licenses, creation date, names of all "
"contributors, and so on."
msgstr ""
"每个 CK 组件都有一个 .cm 目录，其中有描述特定工件的 meta.json 文件和 info.json 文件，"
"以保持特定工件的出处，包括版权、许可证、创建日期、所有贡献者的名字，等等。"

#: ../../src/introduction.md:103
msgid ""
"CK framework has an internal default CK repository with stable CK modules"
" and the most commonly used automation actions across many research "
"projects. When CK framework is used for the first time, it also creates a"
" local CK repository in the user space to be used as a scratch pad."
msgstr ""
"CK 框架有一个内部默认的 CK 资源库，里面有稳定的 CK 模块和许多研究项目中最常用的自动化 action。"
"当 CK 框架第一次使用时，它还会在用户空间中创建一个本地 CK 库，作为 scratch 使用。"

#: ../../src/introduction.md:110
msgid ""
"CK provides a simple command line interface similar natural language to "
"manage CK repositories, entries, and actions:"
msgstr ""
"CK 提供了简单的命令行界面，类似于自然语言来管理 CK 的资料库、条目和 action："

#: ../../src/introduction.md:117
msgid ""
"The next example demonstrates how to compile and run the shared "
"automotive benchmark on any platform, and then create a copy of the CK "
"program component:"
msgstr ""
"下一个例子演示了如何在任何平台上编译和运行共享汽车基准，然后创建 CK 程序组件的副本："

#: ../../src/introduction.md:154
msgid ""
"The CK program module describes dependencies on software detection "
"plugins and meta packages using simple tags with version ranges that the "
"community has agreed on:"
msgstr ""
"CK 程序模块使用社区同意的版本范围的简单标签描述对软件检测插件和元包的依赖性："

#: ../../src/introduction.md:176
msgid ""
"CK also provides a Python library with a simple API that can be easily "
"used in web applications or continuous integration services:"
msgstr ""
"CK 还提供了一个具有简单 API 的 Python 库，可以轻松用于网络应用或持续集成服务："

#: ../../src/introduction.md:197
msgid ""
"Based on the feedback from our users, we have recently developed an open "
"CK platform to help the community share CK components, create live "
"scoreboards, and participate in collaborative experiments: "
"https://cKnowledge.io."
msgstr ""
"根据用户的反馈，最近开发了一个开放的 CK 平台，以帮助社区分享 CK 组件，"
"创建实时记分牌，并参与合作实验：https://cKnowledge.io。"

#: ../../src/introduction.md:201
msgid ""
"We suggest you to read this nice blog post from Michel Steuwer about CK "
"basics!"
msgstr ""
"建议阅读 Michel Steuwer 关于 CK 基础知识的这篇漂亮博文！"

#: ../../src/introduction.md:202
msgid ""
"You can find a partial list of CK-compatible repositories at "
"cKnowledge.io/repos."
msgstr ""
"你可以在 cKnowledge.io/repos 找到部分兼容 CK 的仓库列表。"

#: ../../src/introduction.md:208
msgid "How CK supports collaborative and reproducible ML&systems research"
msgstr "CK 如何支持合作性和可重复性的 ML&systems 研究"

#: ../../src/introduction.md:210
msgid ""
"It is a very tedious, ad-hoc, and time consuming process to design "
"complex computational systems that can run AI, ML, and other emerging "
"workloads in the most efficient way due to continuously changing "
"software, hardware, models, data sets, and research techniques."
msgstr ""
"由于软件、硬件、模型、数据集和研究技术的不断变化，"
"要设计出能够以最有效的方式运行人工智能、ML 和其他新兴 \"工作负载\" 的复杂计算系统，是一个非常繁琐、临时性和耗时的过程。"

#: ../../src/introduction.md:214
msgid ""
"The first reason why we have developed CK was to connect our colleagues, "
"students, researchers, and engineers from different workgroups to "
"collaboratively solve these problems and decompose complex systems and "
"research projects into reusable, portable, customizable, and non-"
"virtualized CK components with unified automation actions, Python APIs, "
"CLI, and JSON meta description."
msgstr ""
"开发 CK 的第一个原因是连接我们的同事、学生、研究人员和来自不同工作组的工程师，协同解决这些问题，"
"并将复杂的系统和研究项目分解成可重用的、可移植的、可定制的和非虚拟化的CK组件，"
"并有统一的自动化 action、Python API、CLI 和 JSON元描述。"

#: ../../src/introduction.md:219
msgid ""
"We used CK as a common playground to prototype and test different "
"abstractions and automations of many ML&systems tasks in collaboration "
"with our great academic and industrial partners while agreeing on APIs "
"and meta descriptions of all components. Over years the project grew from"
" several core CK modules and abstractions to 150+ CK modules with 600+ "
"actions automating typical, repetitive, and tedious tasks from ML&systems"
" R&D. See this fun video and the knowledge graph showing the evolution of"
" CK over time."
msgstr ""
"使用 CK 作为一个共同的游乐场，与我们伟大的学术和工业伙伴合作，"
"对许多 ML&systems 任务的不同抽象和自动化进行原型化和测试，同时对所有组件的 API 和元描述达成一致。"
"多年来，该项目从几个核心的 CK 模块和抽象发展到 150 多个 CK 模块，有 600 多个 action，"
"将 ML&systems 研发的典型、重复和繁琐的任务自动化。请看这个有趣的视频和显示 CK 随时间演变的知识图。"

#: ../../src/introduction.md ../../src/introduction.md:229
msgid "CK evolution"
msgstr ""

#: ../../src/introduction.md:231
msgid ""
"For example, CK now features actions for software detection, package "
"installation and platform/OS detection to automate the detection and "
"installation of all the dependencies including data sets and models "
"required by different research projects."
msgstr ""
"例如，CK 现在具有软件检测、软件包安装和平台/操作系统检测的功能，"
"可以自动检测和安装所有的依赖性，包括不同研究项目所需的数据集和模型。"

#: ../../src/introduction.md:238
msgid ""
"Thanks to unified automation actions, APIs, and JSON meta descriptions of"
" such components, we could apply the DevOps methodology to connect them "
"into platform-agnostic, portable, customizable, and reproducible program "
"pipelines (workflows). Such workflows can automatically adapt to evolving"
" environments, models, data sets, and non-virtualized platforms by "
"automatically detecting the properties of a target platform, finding all "
"required components on a user platform using CK software detection "
"plugins based on the list of all dependencies, installing missing "
"components using portable CK meta packages, building and running code, "
"and unifying and testing outputs."
msgstr ""
"由于这种组件的统一自动化动作、API 和 JSON 元描述，可以应用 DevOps 方法，"
"将它们连接成平台无关的、可移植的、可定制的和可重复的程序管道（工作流）。"
"这样的工作流程可以自动适应不断变化的环境、模型、数据集和非虚拟化平台，通过自动检测目标平台的属性，"
"使用 CK 软件检测插件在用户平台上找到所有需要的组件，使用可移植的 CK 元包安装缺失的组件，构建和运行代码，并统一和测试输出。"

#: ../../src/introduction.md:249
msgid ""
"Eventually, CK helped to connect researchers and practitioners to "
"collaboratively co-design, benchmark, optimize, and validate novel AI, "
"ML, and quantum techniques using the open repository of knowledge with "
"live SOTA scoreboards and reproducible papers. Such scoreboards can be "
"used to find and rebuild the most efficient AI/ML/SW/HW stacks on a "
"Pareto frontier across diverse platforms from supercomputers to edge "
"devices while trading off speed, accuracy, energy, size, and different "
"costs. Stable and optimized CK workflows can be then deployed inside "
"Docker and Kubernetes to simplify the integration and adoption of "
"innovative technology in production."
msgstr ""
"最终，CK 帮助连接研究人员和从业人员，利用开放的知识库与 SOTA 记分牌和可复制的论文，"
"协作地共同设计、基准测试、优化和验证新型 AI、ML 和量子技术。"
"这种记分牌可以用来在从超级计算机到边缘设备的不同平台上寻找和重建最有效的 AI/ML/SW/HW 堆栈，同时权衡速度、精度、能量、尺寸和不同成本。"
"然后可以在 Docker 和 Kubernetes 内部部署稳定和优化的 CK 工作流程，以简化生产中创新技术的整合和采用。"

#: ../../src/introduction.md ../../src/introduction.md:260
msgid "Pareto-efficient ML/SW/HW stacks"
msgstr ""

#: ../../src/introduction.md:262
msgid ""
"Our goal is to use the CK technology to bring DevOps principles to "
"ML&systems R&D, make it more collaborative, reproducible, and reusable, "
"enable portable MLOps, and make it possible to understand what happens "
"inside complex and \"black box\" computational systems."
msgstr ""
"我们的目标是利用 CK 技术将 DevOps 原则引入 ML&systems 研发，"
"使其更具协作性、可复制性和可重复使用性，实现可移植的 MLOps，并使其有可能了解复杂和 \"黑箱\" 计算系统内部发生了什么。"

#: ../../src/introduction.md:267
msgid ""
"Our dream is to see portable workflows shared along with new systems, "
"algorithms, and published research techniques to be able to quickly test,"
" reuse and compare them across different data sets, models, software, and"
" hardware! That is why we support related reproducibility and "
"benchmarking initiatives including artifact evaluation, MLPerf™, "
"PapersWithCode, and ACM artifact review and badging."
msgstr ""
"我们的梦想是看到可移植的工作流程与新的系统、算法和已发表的研究技术一起分享，"
"以便能够在不同的数据集、模型、软件和硬件中快速测试、重复使用和比较！"
"这就是为什么我们支持相关的重现性和基准倡议，包括工件评估、MLPerf™、PapersWithCode以及 ACM 工件审查和徽章。"

#: ../../src/introduction.md ../../src/introduction.md:274
msgid "cKnowledge platform concept"
msgstr ""

#: ../../src/introduction.md:281
msgid "CK platform"
msgstr ""

#: ../../src/introduction.md:284
msgid ""
"cKnowledge.io: the open portal with stable CK components, workflows, "
"reproduced papers, and SOTA scoreboards for complex computational systems"
" (AI,ML,quantum,IoT):"
msgstr ""
"cKnowledge.io：拥有稳定的 CK 组件、工作流程、转载的论文和复杂计算系统（AI、ML、量子、物联网）的 SOTA 记分牌的开放门户："

#: ../../src/introduction.md:285
msgid "Browse all CK ML&systems components"
msgstr "浏览所有 CK ML&systems 组件"

#: ../../src/introduction.md:286
msgid "Browse CK compatible repositories"
msgstr "浏览 CK 兼容库"

#: ../../src/introduction.md:287
msgid "Browse SOTA scoreboards powered by CK workflows"
msgstr "浏览由 CK 工作流程驱动的 SOTA 记分牌"

#: ../../src/introduction.md:288
msgid "Browse all shared CK components"
msgstr "浏览所有共享的 CK 组件"

#: ../../src/introduction.md:289
msgid "Check documentation"
msgstr "检查文档"

#: ../../src/introduction.md:290
msgid "Our reproducibility initiatives for systems and ML conferences"
msgstr "我们对系统和 ML 会议的可重复性倡议"

#: ../../src/introduction.md:297
msgid "CK showroom"
msgstr ""

#: ../../src/introduction.md:299
msgid ""
"CK-powered workflows, automation actions, and reusable artifacts for "
"ML&systems R&D"
msgstr ""
"CK-powered 工作流程、自动化行动和可重复使用的工件，用于 ML&systems 研发"
