# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020 Grigori Fursin and the cTuning foundation
# This file is distributed under the same license as the Collective
# Knowledge framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Collective Knowledge framework 2.6.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-21 10:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../src/first-steps.md:1
msgid "Trying CK"
msgstr ""

#: ../../src/first-steps.md:3
msgid "How CK enables portable and customizable workflows"
msgstr ""

#: ../../src/first-steps.md:5
msgid ""
"We originally developed CK to help our partners and collaborators "
"implement modular, portable, customizable, and reusable workflows. We "
"needed such workflows to enable collaborative and reproducible ML&systems"
" R&D while focusing on deep learning benchmarking and ML/SW/HW co-design."
" We also wanted to automate and reuse tedious tasks that are repeated "
"across nearly all ML&systems projects as described in our FOSDEM "
"presentation."
msgstr ""

#: ../../src/first-steps.md:12
msgid ""
"In this section, we demonstrate how to use CK with portable and non-"
"virtualized program workflows that can automatically adapt to any "
"platform and user environment, i.e. automatically detect target platform "
"properties and software dependencies and then compile and run a given "
"program with any compatible dataset and model in a unified way."
msgstr ""

#: ../../src/first-steps.md:17
msgid ""
"Note that such approach also supports our reproducibility initiatives at "
"ML&systems conferences to share portable workflows along with published "
"papers. Our goal is to make it easier for the community to reproduce "
"research techniques, compare them, build upon them, and adopt them in "
"production."
msgstr ""

#: ../../src/first-steps.md:22
msgid "CK installation"
msgstr ""

#: ../../src/first-steps.md:24
msgid ""
"Follow this guide to install CK on Linux, MacOS, or Windows. Don't "
"hesitate to contact us if you encounter any problem or have questions."
msgstr ""

#: ../../src/first-steps.md:29
msgid "Pull CK repositories with the universal program workflow"
msgstr ""

#: ../../src/first-steps.md:32
msgid ""
"Now you can pull CK repo with automation recipes for collaborative, "
"reproducible and cross-platform benchmarking"
msgstr ""

#: ../../src/first-steps.md:39
msgid ""
"CK will automatically pull all required CK repositories with different "
"automation actions, benchmarks, and datasets in the CK format. You can "
"see them as follows:"
msgstr ""

#: ../../src/first-steps.md:46
msgid ""
"By default, CK stores all CK repositories in the user space in $HOME/CK-"
"REPOS. However, you can change it using the environment variable "
"CK_REPOS."
msgstr ""

#: ../../src/first-steps.md:48
msgid "Manage CK entries"
msgstr ""

#: ../../src/first-steps.md:51
msgid "You can now see all shared program workflows in the CK format:"
msgstr ""

#: ../../src/first-steps.md:57
msgid ""
"You can find and investigate the CK format for a given program (such as "
"image-corner-detection) as follows:"
msgstr ""

#: ../../src/first-steps.md:63
msgid ""
"You can see the CK meta description of this program from the command line"
" as follows:"
msgstr ""

#: ../../src/first-steps.md:69
msgid ""
"It may be more convenient to check the structure of this entry at GitHub "
"with all the sources and meta-descriptions."
msgstr ""

#: ../../src/first-steps.md:71
msgid ""
"You can also see the CK JSON meta description for this CK program entry "
"here. When you invoke automation actions in the CK module program, the "
"automation code will read this meta description and perform actions for "
"different programs accordingly."
msgstr ""

#: ../../src/first-steps.md:74
msgid "Invoke CK automation actions"
msgstr ""

#: ../../src/first-steps.md:76
msgid "You can now try to compile this program on your platform:"
msgstr ""

#: ../../src/first-steps.md:82
msgid ""
"CK will invoke the function \"compile\" in the module \"program\" (you "
"can see it at GitHub or you can find the source code of this CK module "
"locally using \"ck find module:program\"), read the JSON meta of image-"
"corner-detection, and perform a given action."
msgstr ""

#: ../../src/first-steps.md:86
msgid "Note, that you can obtain all flags for a given action as follows:"
msgstr ""

#: ../../src/first-steps.md:91
msgid ""
"You can update any above key from the command line by adding \"--\" to "
"it. If you omit the value, CK will use \"yes\" by default."
msgstr ""

#: ../../src/first-steps.md:93
msgid ""
"When compiling program, CK will first attempt to automatically detect the"
" properties of the platform and all required software dependencies such "
"as compilers and libraries that are already installed on this platform. "
"CK uses multiple plugins describing how to detect different software, "
"models, and datasets."
msgstr ""

#: ../../src/first-steps.md:97
msgid ""
"Users can add their own plugins either in their own CK repositories or in"
" already existing ones."
msgstr ""

#: ../../src/first-steps.md:99
msgid ""
"You can also perform software detection manually from the command line. "
"For example you can detect all installed GCC or LLVM versions:"
msgstr ""

#: ../../src/first-steps.md:105
msgid ""
"Detected software is registered in the local CK repository together with "
"the automatically generated environment script (env.sh or env.bat) "
"specifying different environment variables for this software (paths, "
"versions, etc)."
msgstr ""

#: ../../src/first-steps.md:110
msgid "You can list registered software as follows:"
msgstr ""

#: ../../src/first-steps.md:117
msgid "You can use CK as a virtual environment similar to venv and Conda:"
msgstr ""

#: ../../src/first-steps.md:122
msgid ""
"Such approach allows us to separate CK workflows from hardwired "
"dependencies and automatically plug in the requied ones."
msgstr ""

#: ../../src/first-steps.md:124
msgid "You can now run this program as follows:"
msgstr ""

#: ../../src/first-steps.md:129
msgid ""
"While running the program, CK will collect and unify various "
"characteristics (execution time, code size, etc). This enables unified "
"benchmarking reused across different programs, datasets, models, and "
"platform. Furthermore, we can continue improving this universal program "
"workflow to monitor CPU/GPU frequencies, performing statistical analysis "
"of collected characteristics, validating outputs, etc:"
msgstr ""

#: ../../src/first-steps.md:139
msgid ""
"Note that CK programs can automatically plug different datasets from CK "
"entries that can be shared by different users in different repos (for "
"example, when publishing a new paper):"
msgstr ""

#: ../../src/first-steps.md:147
msgid ""
"Our goal is to help researchers reuse this universal CK program workflow "
"instead of rewriting complex infrastructure from scratch in each research"
" project."
msgstr ""

#: ../../src/first-steps.md:150
msgid "Install missing packages"
msgstr ""

#: ../../src/first-steps.md:152
msgid ""
"Note, that if a given software dependency is not resolved, CK will "
"attempt to automatically install it using CK meta packages (see the list "
"of shared CK packages at cKnowledge.io). Such meta packages contain JSON "
"meta information and scripts to install and potentially rebuild a given "
"package for a given target platform while reusing existing build tools "
"and native package managers if possible (make, cmake, scons, spack, "
"python-poetry, etc). Furthermore, CK package manager can also install "
"non-software packages including ML models and datasets while ensuring "
"compatibility between all components for portable workflows!"
msgstr ""

#: ../../src/first-steps.md:167
msgid ""
"You can list CK packages available on your system (CK will search for "
"them in all CK repositories installed on your system):"
msgstr ""

#: ../../src/first-steps.md:172
msgid "You can then try to install a given LLVM on your system as follows:"
msgstr ""

#: ../../src/first-steps.md:177
msgid ""
"If this package is successfully installed, CK will also create an "
"associated CK environment:"
msgstr ""

#: ../../src/first-steps.md:183
msgid ""
"By default, all packages are installed in the user space ($HOME/CK-"
"TOOLS). You can change this path using the CK environment variable "
"CK_TOOLS. You can also ask CK to install packages inside CK virtual "
"environment entries directly as follows:"
msgstr ""

#: ../../src/first-steps.md:190
msgid ""
"Note that you can now detect or install multiple versions of the same "
"tool on your system that can be picked up and used by portable CK "
"workflows!"
msgstr ""

#: ../../src/first-steps.md:193
msgid "You can run a CK virtual environment to use a given version as follows:"
msgstr ""

#: ../../src/first-steps.md:200
msgid ""
"You can also run multiple virtual environments at once to combine "
"different versions of different tools together:"
msgstr ""

#: ../../src/first-steps.md:206
msgid ""
"Another important goal of CK is invoke all automation actions and "
"portable workflows across all operating systems and environments "
"including Linnux, Windows, MacOS, Android (you can retarget your workflow"
" for Andoird by adding --target_os=android23-arm64 flag to all above "
"commands when installing packages or compiling and running your "
"programs). The idea is to have a unified interface for all research "
"techniques and artifacts shared along with research papers to make the "
"onboarding easier for the community!"
msgstr ""

#: ../../src/first-steps.md:214
msgid "Participate in crowd-tuning"
msgstr ""

#: ../../src/first-steps.md:216
msgid ""
"You can even participate in crowd-tuning of multiple programs and data "
"sets across diverse platforms:."
msgstr ""

#: ../../src/first-steps.md:224
msgid "You can see the live scoreboard with optimizations here."
msgstr ""

#: ../../src/first-steps.md:226
msgid "Use CK python API"
msgstr ""

#: ../../src/first-steps.md:228
msgid ""
"You can also run CK automation actions directly from any Python (2.7+ or "
"3.3+) using one ck.access function:"
msgstr ""

#: ../../src/first-steps.md:251
msgid "Try the CK MLPerf™ workflow"
msgstr ""

#: ../../src/first-steps.md:253
msgid ""
"Feel free to try more complex CK MLPerf workflows to benchmark ML Systems"
" across different models, data sets, frameworks and hardware as described"
" here."
msgstr ""

#: ../../src/first-steps.md:258
msgid "Further information"
msgstr ""

#: ../../src/first-steps.md:260
msgid ""
"As you may notice, CK helps to convert ad-hoc research projects into a "
"unified database of reusable components with common automation actions "
"and unified meta descriptions. The goal is to promote artifact sharing "
"and reuse while gradually substituting and unifying all tedious and "
"repetitive research tasks!"
msgstr ""

#: ../../src/first-steps.md:266
msgid ""
"Please check this guide to learn how to add your own repositories, "
"workflows, and components!"
msgstr ""

#: ../../src/first-steps.md:269
msgid "Contact the CK community"
msgstr ""

#: ../../src/first-steps.md:271
msgid ""
"If you encounter problems or have suggestions, do not hesitate to contact"
" us!"
msgstr ""

